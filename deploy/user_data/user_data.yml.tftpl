#cloud-config

## cloudinit logs are here:
## /var/log/cloud-init.log - The actual process logs
## /var/log/cloud-init-output.log - Any output produced

## upgrade existing apt packages
package_upgrade: true
## install apt packages
packages:
  - fail2ban
  - git
  - ufw
  - zsh

users:
  - name: ${username}
    gecos: ${user_full_name}
    ssh-authorized-keys:
      - ${public_ssh_key}
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    groups: sudo
    shell: /bin/bash

runcmd:
  - printf '\n\n=======\n'
  - echo 'BEGIN RUNCMD'
  - printf '=======\n\n'

  - printf '\n\n=======\n'
  - echo 'CONFIGURE TIME ZONE'
  - printf '=======\n\n'
  ## Set the system's timezone:
  ## Common options: America/New_York America/Chicago America/Denver America/Los_Angeles
  - timedatectl set-timezone America/New_York
  ## Start and stop cronjobs, as sometimes changing the timezone can screw them up:
  - /etc/init.d/cron stop
  - /etc/init.d/cron start

  - printf '\n\n=======\n'
  - echo 'CONFIGURE SSH'
  - printf '=======\n\n'
  ## Temporarily stop fail2ban as we secure SSH:
  - service fail2ban stop
  ## Back up our SSH configuration file:
  - cp /etc/ssh/sshd_config /etc/ssh/_sshd_config.original
  ## Change the default SSH port:
  # - sed -i -e '/^#?Port/s/^.*$/Port 4444/' /etc/ssh/sshd_config
  ## `PasswordAuthentication no` is set by default but try setting it just in case:
  - sed -i -e '/^#?PasswordAuthentication/s/^.*$/PasswordAuthentication no/' /etc/ssh/sshd_config
  ## Prevent root login via SSH:
  - sed -i -e '/^#?PermitRootLogin/s/^.*$/PermitRootLogin no/' /etc/ssh/sshd_config
  ## Set logging level to verbose: (I think some log analysis tools count on this)
  - sed -i -e '/^#?LogLevel/s/^.*$/LogLevel VERBOSE/' /etc/ssh/sshd_config
  ## Disable X11Forwarding:
  - sed -i -e '/^#?X11Forwarding/s/^.*$/X11Forwarding no/' /etc/ssh/sshd_config
  ## Disable AllowTcpForwarding:
  - sed -i -e '/^#?AllowTcpForwarding/s/^.*$/AllowTcpForwarding no/' /etc/ssh/sshd_config
  ## Disable AllowAgentForwarding:
  - sed -i -e '/^#?AllowAgentForwarding/s/^.*$/AllowAgentForwarding no/' /etc/ssh/sshd_config
  ## Set the maximum sessions to 2:
  - sed -i -e '/^#?MaxSessions/s/^.*$/MaxSessions 2/' /etc/ssh/sshd_config
  ## Set the maximum auth tries to 2:
  - sed -i -e '/^#?MaxAuthTries/s/^.*$/MaxAuthTries 2/' /etc/ssh/sshd_config
  ## Set client alive count max to 2:
  - sed -i -e '/^#?ClientAliveCountMax/s/^.*$/ClientAliveCountMax 2/' /etc/ssh/sshd_config
  ## Disable compression:
  - sed -i -e '/^#?Compression/s/^.*$/Compression no/' /etc/ssh/sshd_config
  ## Add a comment that we're adding new config things below
  - sed -i -e '$a# Added by cloud-config init process' /etc/ssh/sshd_config
  ## Restrict SSH access to only our one allowed user:
  - sed -i -e '$aAllowUsers ${username}' /etc/ssh/sshd_config
  ## Now that we're done securing SSH, restart it:
  - /etc/init.d/ssh restart
  ## Start fail2ban now that we're done securing SSH
  - service fail2ban start

  - printf '\n\n=======\n'
  - echo 'CONFIGURING UFW'
  - printf '=======\n\n'
  ## Temporarily disable uncomplicated firewall as we're going to start configuring it:
  - ufw disable
  ## Create backups of our firewall rules:
  # - cp /etc/ufw/before.rules /etc/ufw/before.original
  # - cp /etc/ufw/before6.rules /etc/ufw/before6.original
  # Allow SSH on the default ports:
  - ufw allow ssh
  ## Deny requests on the default SSH ports:
  # - ufw deny ssh
  ## Allow requests on updated SSH port:
  # - ufw allow 4444/tcp
  ## Allow requests on the http port:
  - ufw allow http
  ## Allow requests on the https port:
  - ufw allow https
  ## Turn on logging:
  - ufw logging on
  ## Enable uncomplicated firewall now that we have it configured:
  - ufw enable
  ## Show the rules that are active:
  - ufw status verbose

###########
## NGINX ##
###########

  - printf '\n\n=======\n'
  - echo 'INSTALLING NGINX'
  - printf '=======\n\n'
  - |
    curl -fsSL https://nginx.org/keys/nginx_signing.key | \
    gpg --dearmor | \
    tee /usr/share/keyrings/nginx.gpg > /dev/null
  - |
    echo "deb [arch=$(dpkg --print-architecture) \
    signed-by=/usr/share/keyrings/nginx.gpg] \
    http://nginx.org/packages/debian \
    $(lsb_release -cs) nginx" |\
    tee /etc/apt/sources.list.d/nginx.list
  - apt update -yq
  - apt install -yq nginx

  - printf '\n\n=======\n'
  - echo 'SET UP NGINX'
  - printf '=======\n\n'
  # get the recommended nginx security parameter for certbot using curl:
  - curl -sSLo ${tmp_folder_path}/docker/nginx/conf.d/options-ssl-nginx.conf https://raw.githubusercontent.com/certbot/certbot/master/certbot-nginx/certbot_nginx/_internal/tls_configs/options-ssl-nginx.conf

  - printf '\n\n=======\n'
  - echo 'ADDING APT FOR MARIADB'
  - printf '=======\n\n'
  - |
    curl -fsSL https://mariadb.org/mariadb_release_signing_key.asc | \
    gpg --dearmor | \
    tee /usr/share/keyrings/mariadb.gpg > /dev/null
  - |
    echo "deb [arch=$(dpkg --print-architecture) \
    signed-by=/usr/share/keyrings/mariadb.gpg] \
    http://mirror.mariadb.org/repo/10.6/debian/ \
    $(lsb_release -cs) main" |\
    tee /etc/apt/sources.list.d/mariadb.list
  - apt update -yq

  - printf '\n\n=======\n'
  - echo 'ADDING APT FOR PHP'
  - printf '=======\n\n'
  - |
    sudo curl -fsSL https://packages.sury.org/php/apt.gpg | \
    sudo gpg --dearmor | \
    sudo tee /usr/share/keyrings/php.gpg > /dev/null
  - |
    sudo echo "deb [arch=$(dpkg --print-architecture) \
    signed-by=/usr/share/keyrings/php.gpg] \
    https://packages.sury.org/php/ \
    $(lsb_release -cs) main" |\
    sudo tee /etc/apt/sources.list.d/php.list
  - apt update -yq

  ## TODO: this is a good idea but maybe paranoid, but definitely a PITA during development
  # - printf '\n\n=======\n'
  # - echo 'CHANGE PASSWDS'
  # - printf '=======\n\n'
  # - echo 'root:${root_temporary_password}' | chpasswd
  # - echo '${username}:${user_temporary_password}' | chpasswd

  ## TODO: this is a good idea but maybe paranoid, but definitely a PITA during development
  # - printf '\n\n=======\n'
  # - echo 'EXPIRE PASSWDS'
  # - printf '=======\n\n'
  # - passwd --expire root
  # - passwd --expire ${username}

  - printf '\n\n=======\n'
  - echo 'END RUNCMD'
  - printf '=======\n\n'

write_files:
  - content: ${nginx_conf_base64}
    encoding: b64
    path: ${tmp_folder_path}/docker/nginx/conf.d/default.conf

## Restart the server:
power_state:
  mode: reboot
  delay: "now"
  message: "Goodbye!"
  timeout: 30
  condition: True
